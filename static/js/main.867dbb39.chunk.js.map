{"version":3,"sources":["components/Footer/Copyright.tsx","components/Footer/Footer.tsx","components/Header.tsx","components/Search.tsx","components/CountryCube.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","footer","backgroundColor","palette","background","paper","padding","spacing","Footer","classes","className","Header","AppBar","position","Toolbar","noWrap","Search","setCountryList","useState","searchTerm","setSearchTerm","helperText","setHelperText","error","setError","useEffect","axios","get","then","res","data","catch","err","console","log","TextField","id","label","style","margin","placeholder","fullWidth","InputLabelProps","shrink","value","onChange","e","target","icon","marginRight","heroContent","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","cardMedia","cardContent","flexGrow","CountryCube","props","Grid","item","key","name","xs","sm","md","Card","CardMedia","image","flag","title","CardContent","gutterBottom","component","alpha2Code","capital","languages","map","lang","i","length","borders","border","timezones","timezone","currencies","currency","symbol","topLevelDomain","domain","App","countryList","Fragment","CssBaseline","Container","maxWidth","container","country","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.867dbb39.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { Typography, Link } from '@material-ui/core';\r\n\r\nexport const Copyright = () => {\r\n\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright Â© '}\r\n            <Link color=\"inherit\" href=\"https://github.com/sagi770/\">\r\n                Sagi Tawil\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    )\r\n}\r\n","import * as React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Copyright } from './Copyright';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    footer: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        padding: theme.spacing(6),\r\n    },\r\n}));\r\n\r\nexport const Footer = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <footer className={classes.footer}>\r\n            <Copyright />\r\n        </footer>\r\n    )\r\n}","import * as React from 'react';\r\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\r\n\r\nexport const Header = () => {\r\n\r\n    return (\r\n        <AppBar position=\"relative\">\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n                    LivePerson Countries Assignment\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Country } from '../interfaces';\r\n\r\ninterface Props {\r\n  setCountryList: React.Dispatch<React.SetStateAction<Country[]>>;\r\n}\r\n\r\nexport const Search = ({ setCountryList }: Props) => {\r\n  const [searchTerm, setSearchTerm] = useState<string>(\"\");\r\n  const [helperText, setHelperText] = useState<string>(\"\");\r\n  const [error, setError] = useState<boolean>(false);\r\n\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchTerm(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(searchTerm === \"\")return;\r\n\r\n    axios\r\n      .get(`https://restcountries.eu/rest/v2/name/${searchTerm}`)\r\n      .then(res => {\r\n        setError(false);\r\n        setHelperText(\"\");\r\n        setCountryList(res.data);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        setError(true);\r\n        setHelperText(\"Country not found please try again.\");\r\n        setCountryList([])\r\n      });\r\n\r\n  }, [searchTerm,setCountryList]);\r\n\r\n  return (\r\n    <TextField\r\n      id=\"outlined-full-width\"\r\n      label=\"Country Name\"\r\n      style={{ margin: 8 }}\r\n      placeholder=\"Please Type Country Name\"\r\n      fullWidth\r\n      margin=\"normal\"\r\n      InputLabelProps={{\r\n        shrink: true,\r\n      }}\r\n      value={searchTerm}\r\n      variant=\"outlined\"\r\n      onChange={handleChange}\r\n      error={error}\r\n      helperText={helperText}\r\n\r\n    />\r\n  )\r\n}","import * as React from 'react';\r\nimport {  Card,  CardContent, CardMedia, Grid, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Country } from '../interfaces';\r\n\r\ninterface CountryProps extends Country {\r\n    name: string;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    icon: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    heroContent: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        padding: theme.spacing(8, 0, 6),\r\n    },\r\n    heroButtons: {\r\n        marginTop: theme.spacing(4),\r\n    },\r\n    cardGrid: {\r\n        paddingTop: theme.spacing(8),\r\n        paddingBottom: theme.spacing(8),\r\n    },\r\n    card: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    cardMedia: {\r\n        paddingTop: '56.25%',\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1,\r\n    }\r\n}));\r\n\r\nexport const CountryCube = (props: CountryProps) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid item key={props.name} xs={12} sm={6} md={4}>\r\n            <Card className={classes.card}>\r\n                <CardMedia\r\n                    className={classes.cardMedia}\r\n                    image={props.flag}\r\n                    title=\"Country Flag\"\r\n                />\r\n                <CardContent className={classes.cardContent}>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        {props.name}\r\n                    </Typography>\r\n                    <Typography>\r\n                        Country Code: {props.alpha2Code}\r\n                    </Typography>\r\n                    {(props.capital !== \"\" ?\r\n                        <Typography>\r\n                            Capital City: {props.capital}\r\n                        </Typography> : null)\r\n                    }\r\n                    <Typography>\r\n                        Languages: {props.languages.map((lang, i) => `${lang.name} ${(i !== (props.languages.length - 1) ? ', ' : '')}`)}\r\n                    </Typography>\r\n                    <Typography>\r\n                        Border Countries: {props.borders.map((border, i) => `${border} ${(i !== (props.borders.length - 1) ? ', ' : '')}`)}\r\n                    </Typography>\r\n                    <Typography>\r\n                        Timezones: {props.timezones.map((timezone, i) => `${timezone} ${(i !== (props.timezones.length - 1) ? ', ' : '')}`)}\r\n                    </Typography>\r\n                    <Typography>\r\n                        Currencies: {props.currencies.map((currency, i) => `${currency.name} (${currency.symbol}) ${(i !== (props.currencies.length - 1) ? ', ' : '')}`)}\r\n                    </Typography>\r\n\r\n                    <Typography>\r\n                        Top Level Domain: {props.topLevelDomain.map((domain, i) => `${domain} ${(i !== (props.topLevelDomain.length - 1) ? ', ' : '')}`)}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n}","import React, { useState } from 'react';\nimport { CssBaseline, Grid, Container } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Footer } from './components/Footer/Footer'\nimport { Header } from './components/Header'\nimport { Search } from './components/Search'\nimport { CountryCube } from './components/CountryCube';\n\nimport { Country } from './interfaces';\n\n\nconst useStyles = makeStyles((theme) => ({\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [countryList, setCountryList] = useState<Country[]>([]);\n\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Header />\n      <main>\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            <Search setCountryList={setCountryList} />\n          </Container>\n        </div>\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          {/* End hero unit */}\n          <Grid container spacing={4}>\n            {countryList.map((country) => (\n              <CountryCube key={country.alpha2Code} {...country} />\n            ))}\n          </Grid>\n        </Container>\n      </main>\n      <Footer />\n\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}